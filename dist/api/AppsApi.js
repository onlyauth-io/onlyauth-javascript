"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _DeleteApp200Response = _interopRequireDefault(require("../model/DeleteApp200Response"));
var _ErrorResponse = _interopRequireDefault(require("../model/ErrorResponse"));
var _GetApps200Response = _interopRequireDefault(require("../model/GetApps200Response"));
var _NewApp200Response = _interopRequireDefault(require("../model/NewApp200Response"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * OnlyAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
/**
* Apps service.
* @module api/AppsApi
* @version 0.1.2
*/
var AppsApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new AppsApi. 
  * OnlyAuth Javascript Library
  * @alias module:api/AppsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function AppsApi(apiClient) {
    _classCallCheck(this, AppsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Delete an app
   * @param {String} appId Unique identifier of the app to be deleted (APPX-XXX)
   * @param {String} clientId Client identifier for authentication (CLNT-XXX)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteApp200Response} and HTTP response
   */
  _createClass(AppsApi, [{
    key: "deleteAppWithHttpInfo",
    value: function deleteAppWithHttpInfo(appId, clientId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteApp");
      }
      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
        'client_id': clientId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DeleteApp200Response["default"];
      return this.apiClient.callApi('/apps/{app_id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete an app
     * @param {String} appId Unique identifier of the app to be deleted (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteApp200Response}
     */
  }, {
    key: "deleteApp",
    value: function deleteApp(appId, clientId) {
      return this.deleteAppWithHttpInfo(appId, clientId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get an app by uuid
     * @param {String} appId Unique identifier of the app to be fetched (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
  }, {
    key: "getAppByIdWithHttpInfo",
    value: function getAppByIdWithHttpInfo(appId, clientId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppById");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getAppById");
      }
      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
        'client_id': clientId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _NewApp200Response["default"];
      return this.apiClient.callApi('/apps/{app_id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get an app by uuid
     * @param {String} appId Unique identifier of the app to be fetched (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
  }, {
    key: "getAppById",
    value: function getAppById(appId, clientId) {
      return this.getAppByIdWithHttpInfo(appId, clientId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get all apps
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApps200Response} and HTTP response
     */
  }, {
    key: "getAppsWithHttpInfo",
    value: function getAppsWithHttpInfo(clientId) {
      var postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getApps");
      }
      var pathParams = {};
      var queryParams = {
        'client_id': clientId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['BearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _GetApps200Response["default"];
      return this.apiClient.callApi('/apps', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get all apps
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApps200Response}
     */
  }, {
    key: "getApps",
    value: function getApps(clientId) {
      return this.getAppsWithHttpInfo(clientId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Create a new app
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
  }, {
    key: "newAppWithHttpInfo",
    value: function newAppWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'client_id': opts['clientId']
      };
      var authNames = ['BearerAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _NewApp200Response["default"];
      return this.apiClient.callApi('/apps', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create a new app
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
  }, {
    key: "newApp",
    value: function newApp(opts) {
      return this.newAppWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update an app
     * @param {String} appId Unique identifier of the app to be updated (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @param {Object} opts Optional parameters
     * @param {String} [clientId2] Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
  }, {
    key: "updateAppWithHttpInfo",
    value: function updateAppWithHttpInfo(appId, clientId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateApp");
      }
      var pathParams = {
        'app_id': appId
      };
      var queryParams = {
        'client_id': clientId
      };
      var headerParams = {};
      var formParams = {
        'client_id': opts['clientId2']
      };
      var authNames = ['BearerAuth'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = _NewApp200Response["default"];
      return this.apiClient.callApi('/apps/{app_id}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update an app
     * @param {String} appId Unique identifier of the app to be updated (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId2 Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
  }, {
    key: "updateApp",
    value: function updateApp(appId, clientId, opts) {
      return this.updateAppWithHttpInfo(appId, clientId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return AppsApi;
}();