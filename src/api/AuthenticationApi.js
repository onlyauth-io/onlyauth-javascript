/**
 * OnlyAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAccessToken200Response from '../model/CreateAccessToken200Response';
import ErrorResponse from '../model/ErrorResponse';
import ValidateSuccessToken200Response from '../model/ValidateSuccessToken200Response';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 0.1.2
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * OnlyAuth Javascript Library
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Creates a short-lived JWT token to integrate the widget
     * @param {String} appId Uuid of the OnlyAuth App (APPX-XXX)
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @param {String} endUserPhoneNumber Phone number of the end user (E164 format)
     * @param {String} endUserUuid Uuid of the end user (any type)
     * @param {String} redirectUri URL to redirect to after authentication
     * @param {String} language Language code (e.g., en-US)
     * @param {String} region Region code (us-1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateAccessToken200Response} and HTTP response
     */
    createAccessTokenWithHttpInfo(appId, clientId, endUserPhoneNumber, endUserUuid, redirectUri, language, region) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createAccessToken");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling createAccessToken");
      }
      // verify the required parameter 'endUserPhoneNumber' is set
      if (endUserPhoneNumber === undefined || endUserPhoneNumber === null) {
        throw new Error("Missing the required parameter 'endUserPhoneNumber' when calling createAccessToken");
      }
      // verify the required parameter 'endUserUuid' is set
      if (endUserUuid === undefined || endUserUuid === null) {
        throw new Error("Missing the required parameter 'endUserUuid' when calling createAccessToken");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling createAccessToken");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling createAccessToken");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling createAccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'app_id': appId,
        'client_id': clientId,
        'end_user_phone_number': endUserPhoneNumber,
        'end_user_uuid': endUserUuid,
        'redirect_uri': redirectUri,
        'language': language,
        'region': region
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CreateAccessToken200Response;
      return this.apiClient.callApi(
        '/server/access-tokens/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a short-lived JWT token to integrate the widget
     * @param {String} appId Uuid of the OnlyAuth App (APPX-XXX)
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @param {String} endUserPhoneNumber Phone number of the end user (E164 format)
     * @param {String} endUserUuid Uuid of the end user (any type)
     * @param {String} redirectUri URL to redirect to after authentication
     * @param {String} language Language code (e.g., en-US)
     * @param {String} region Region code (us-1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateAccessToken200Response}
     */
    createAccessToken(appId, clientId, endUserPhoneNumber, endUserUuid, redirectUri, language, region) {
      return this.createAccessTokenWithHttpInfo(appId, clientId, endUserPhoneNumber, endUserUuid, redirectUri, language, region)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validates a success token after user completes authentication
     * @param {String} authorization Bearer token for authentication (your API Secret)
     * @param {String} appId Uuid of the OnlyAuth App (APPX-XXX)
     * @param {String} clientId Uuid of you in the OnlyAuth Platform  (CLNT-XXX)
     * @param {String} token The success token to be validated (TOKN-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ValidateSuccessToken200Response} and HTTP response
     */
    validateSuccessTokenWithHttpInfo(authorization, appId, clientId, token) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling validateSuccessToken");
      }
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling validateSuccessToken");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling validateSuccessToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling validateSuccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'app_id': appId,
        'client_id': clientId,
        'token': token
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValidateSuccessToken200Response;
      return this.apiClient.callApi(
        '/server/success-tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validates a success token after user completes authentication
     * @param {String} authorization Bearer token for authentication (your API Secret)
     * @param {String} appId Uuid of the OnlyAuth App (APPX-XXX)
     * @param {String} clientId Uuid of you in the OnlyAuth Platform  (CLNT-XXX)
     * @param {String} token The success token to be validated (TOKN-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ValidateSuccessToken200Response}
     */
    validateSuccessToken(authorization, appId, clientId, token) {
      return this.validateSuccessTokenWithHttpInfo(authorization, appId, clientId, token)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
