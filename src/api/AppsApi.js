/**
 * OnlyAuth API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteApp200Response from '../model/DeleteApp200Response';
import ErrorResponse from '../model/ErrorResponse';
import GetApps200Response from '../model/GetApps200Response';
import NewApp200Response from '../model/NewApp200Response';

/**
* Apps service.
* @module api/AppsApi
* @version 0.1.2
*/
export default class AppsApi {

    /**
    * Constructs a new AppsApi. 
    * OnlyAuth Javascript Library
    * @alias module:api/AppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete an app
     * @param {String} appId Unique identifier of the app to be deleted (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteApp200Response} and HTTP response
     */
    deleteAppWithHttpInfo(appId, clientId) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling deleteApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'client_id': clientId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteApp200Response;
      return this.apiClient.callApi(
        '/apps/{app_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an app
     * @param {String} appId Unique identifier of the app to be deleted (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteApp200Response}
     */
    deleteApp(appId, clientId) {
      return this.deleteAppWithHttpInfo(appId, clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an app by uuid
     * @param {String} appId Unique identifier of the app to be fetched (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
    getAppByIdWithHttpInfo(appId, clientId) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppById");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getAppById");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'client_id': clientId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NewApp200Response;
      return this.apiClient.callApi(
        '/apps/{app_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an app by uuid
     * @param {String} appId Unique identifier of the app to be fetched (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
    getAppById(appId, clientId) {
      return this.getAppByIdWithHttpInfo(appId, clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all apps
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetApps200Response} and HTTP response
     */
    getAppsWithHttpInfo(clientId) {
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling getApps");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': clientId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApps200Response;
      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all apps
     * @param {String} clientId Uuid of you in the OnlyAuth Platform (CLNT-XXX)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetApps200Response}
     */
    getApps(clientId) {
      return this.getAppsWithHttpInfo(clientId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new app
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
    newAppWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'client_id': opts['clientId']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = NewApp200Response;
      return this.apiClient.callApi(
        '/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new app
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
    newApp(opts) {
      return this.newAppWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an app
     * @param {String} appId Unique identifier of the app to be updated (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @param {Object} opts Optional parameters
     * @param {String} [clientId2] Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NewApp200Response} and HTTP response
     */
    updateAppWithHttpInfo(appId, clientId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateApp");
      }

      let pathParams = {
        'app_id': appId
      };
      let queryParams = {
        'client_id': clientId
      };
      let headerParams = {
      };
      let formParams = {
        'client_id': opts['clientId2']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = NewApp200Response;
      return this.apiClient.callApi(
        '/apps/{app_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an app
     * @param {String} appId Unique identifier of the app to be updated (APPX-XXX)
     * @param {String} clientId Client identifier for authentication (CLNT-XXX)
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientId2 Client identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NewApp200Response}
     */
    updateApp(appId, clientId, opts) {
      return this.updateAppWithHttpInfo(appId, clientId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
